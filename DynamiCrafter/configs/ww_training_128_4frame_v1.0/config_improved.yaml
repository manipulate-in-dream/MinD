# DynamiCrafter Configuration - Improved with Path Management
# This configuration uses environment variable substitution for portability
# Set these environment variables before running:
#   MIND_DATA_ROOT: Root directory for data files
#   MIND_DATASET_ROOT: Root directory for datasets
#   MIND_MODEL_ROOT: Root directory for model checkpoints

model:
  base_learning_rate: 5.0e-05
  scale_lr: false
  target: lvdm.models.ddpm3d.LatentVisualDiffusion
  ema_decay: 0.999
  no_cond_log: false
  pretrained: null
  params:
    rescale_betas_zero_snr: true
    parameterization: v
    linear_start: 0.00085
    linear_end: 0.012
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: video
    cond_stage_key: caption
    cond_stage_trainable: false
    image_size: [16, 24]
    channels: 4
    conditioning_key: hybrid
    monitor: val/loss_simple
    scale_by_std: false
    use_ema: false
    uncond_prob: 0.05
    uncond_type: 'empty_seq'
    rand_cond_frame: true
    use_dynamic_rescale: false
    base_scale: 0.3
    fps_condition_type: 'fps'
    perframe_ae: false
    loop_video: false

    scheduler_config:
      target: utils.lr_scheduler.LambdaLRScheduler
      interval: 'step'
      frequency: 100
      params:
        start_step: 0
        final_decay_ratio: 0.01
        decay_steps: 20000

    unet_config:
      target: lvdm.modules.networks.openaimodel3d.UNetModel
      params:
        in_channels: 8
        out_channels: 4
        model_channels: 256
        attention_resolutions:
        - 8
        - 4
        - 2
        num_res_blocks: 2
        channel_mult:
        - 1
        - 2
        - 3
        - 4
        dropout: 0.1
        num_head_channels: 64
        transformer_depth: 1
        context_dim: 1024
        use_linear: true
        temporal_conv: true
        temporal_attention: true
        temporal_selfatt_only: true
        use_relative_position: false
        use_causal_attention: false
        use_checkpoint: true
        use_fp16: true
        addition_attention: false
        image_cross_attention: false
        temporal_length: 4
        image_condition: true
        default_fs: 10
        fs_condition: false

    first_stage_config:
      target: lvdm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 128
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
          video_kernel_size: [3, 1, 1]

    cond_stage_config:
      target: lvdm.modules.encoders.condition.FrozenOpenCLIPEmbedder
      params:
        version: ViT-H-14
        freeze: true

data:
  target: utils.data.DataModuleFromConfig
  params:
    batch_size: 16
    num_workers: 12
    wrap: false
    train:
      target: lvdm.data.webvid.WebVid
      params:
        # Use environment variables or defaults
        # Set MIND_DATA_ROOT to your data directory
        data_dir: ${MIND_DATA_ROOT:./data}/rlds_videos/Robomind_gkz_rlds_wrist
        meta_path: ${MIND_DATA_ROOT:./data}/Robomind_rlds_wrist.csv
        video_length: 4
        frame_stride: 4
        load_raw_resolution: true
        resolution: [128, 128]
        spatial_transform: resize_center_crop
        random_fs: false  # if true, uniformly sample fs with max_fs=frame_stride

lightning:
  precision: 16
  strategy: deepspeed_stage_2
  benchmark: true
  trainer:
    max_epochs: 10
    default_root_dir: ${MIND_OUTPUT_ROOT:./outputs}
    num_nodes: 1
    accelerator: gpu
    devices: 8
    accumulate_grad_batches: 1
    check_val_every_n_epoch: 1
    log_every_n_steps: 20
    enable_checkpointing: true
    gradient_clip_val: 0.5
    gradient_clip_algorithm: norm
    max_steps: 40001
  
  callbacks:
    model_checkpoint:
      target: pytorch_lightning.callbacks.ModelCheckpoint
      params:
        dirpath: ${MIND_MODEL_ROOT:./checkpoints}/dynamicrafter
        filename: 'epoch={epoch:02d}-step={step:05d}'
        save_top_k: -1
        save_last: true
        every_n_epochs: 1
        save_weights_only: false

    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 500
        max_images: 32
        increase_log_steps: false
        log_images_kwargs:
          use_ema_scope: false
          N: 8
          n_rows: 4